{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport defaultStyles from \"../config/styles\";\nimport Screen from \"./Screen\";\nimport colors from \"../config/colors\";\nimport AppButton from \"./AppButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction AppPicker(_ref) {\n  var icon = _ref.icon,\n      items = _ref.items,\n      placeholder = _ref.placeholder,\n      selectedItem = _ref.selectedItem,\n      onSelectedItem = _ref.onSelectedItem,\n      numberOfColoms = _ref.numberOfColoms,\n      _ref$PickerItemsCompo = _ref.PickerItemsComponent,\n      PickerItemsComponent = _ref$PickerItemsCompo === void 0 ? PickerItems : _ref$PickerItemsCompo,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? \"100%\" : _ref$width;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      ModalVisible = _useState2[0],\n      SetModalVisible = _useState2[1];\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(TouchableWithoutFeedback, {\n      onPress: function onPress() {\n        return SetModalVisible(true);\n      },\n      children: _jsxs(View, {\n        style: [styles.container, {\n          width: width\n        }],\n        children: [icon && _jsx(MaterialCommunityIcons, {\n          name: icon,\n          size: 20,\n          color: defaultStyles.colors.medium,\n          style: styles.icon\n        }), selectedItem ? _jsx(Text, {\n          style: styles.text,\n          children: selectedItem\n        }) : _jsx(Text, {\n          style: styles.placeholder,\n          children: placeholder\n        }), _jsx(MaterialCommunityIcons, {\n          name: \"chevron-down\",\n          size: 20,\n          color: defaultStyles.colors.medium\n        })]\n      })\n    }), _jsx(Modal, {\n      visible: ModalVisible,\n      animationType: \"slide\",\n      children: _jsxs(Screen, {\n        children: [_jsx(FlatList, {\n          data: items,\n          keyExtractor: function keyExtractor(item) {\n            return item.value.toString();\n          },\n          numColumns: numberOfColoms,\n          renderItem: function renderItem(_ref2) {\n            var item = _ref2.item;\n            return _jsx(PickerItemsComponent, {\n              onPress: function onPress() {\n                SetModalVisible(false);\n                onSelectedItem(item.label);\n              },\n              item: item,\n              label: item.label\n            });\n          }\n        }), _jsx(AppButton, {\n          title: \"close\",\n          onPress: function onPress() {\n            return SetModalVisible(false);\n          }\n        })]\n      })\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: defaultStyles.colors.white,\n    borderRadius: 25,\n    flexDirection: \"row\",\n    padding: 15,\n    marginVertical: 10,\n    borderColor: colors.primary,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0.6,\n      height: 0.4\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 2,\n    elevation: 9,\n    borderRadius: 10,\n    borderWidth: 1\n  },\n  placeholder: {\n    color: defaultStyles.colors.grey,\n    flex: 1\n  },\n  icon: {\n    marginRight: 10\n  },\n  text: {\n    flex: 1,\n    color: colors.black\n  }\n});\nexport default AppPicker;","map":{"version":3,"sources":["C:/Users/tonyj/Desktop/Mobile App/MyMemories/src/Components/AppPicker.js"],"names":["React","useState","MaterialCommunityIcons","defaultStyles","Screen","colors","AppButton","AppPicker","icon","items","placeholder","selectedItem","onSelectedItem","numberOfColoms","PickerItemsComponent","PickerItems","width","ModalVisible","SetModalVisible","styles","container","medium","text","item","value","toString","label","StyleSheet","create","backgroundColor","white","borderRadius","flexDirection","padding","marginVertical","borderColor","primary","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","borderWidth","color","grey","flex","marginRight","black"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  View,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  Modal,\n  Button,\n  Text,\n  FlatList,\n} from \"react-native\";\n\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport defaultStyles from \"../config/styles\";\nimport Screen from \"./Screen\";\nimport colors from \"../config/colors\";\nimport AppButton from \"./AppButton\";\n\nfunction AppPicker({\n  icon,\n  items,\n  placeholder,\n  selectedItem,\n  onSelectedItem,\n  numberOfColoms,\n  PickerItemsComponent = PickerItems,\n  width = \"100%\",\n}) {\n  const [ModalVisible, SetModalVisible] = useState(false);\n  //This is custom componet to show and pick the catoegory in modal\n\n  return (\n    <>\n      <TouchableWithoutFeedback onPress={() => SetModalVisible(true)}>\n        <View style={[styles.container, { width }]}>\n          {icon && (\n            <MaterialCommunityIcons\n              name={icon}\n              size={20}\n              color={defaultStyles.colors.medium}\n              style={styles.icon}\n            />\n          )}\n\n          {selectedItem ? (\n            <Text style={styles.text}>{selectedItem}</Text>\n          ) : (\n            <Text style={styles.placeholder}>{placeholder}</Text>\n          )}\n\n          <MaterialCommunityIcons\n            name=\"chevron-down\"\n            size={20}\n            color={defaultStyles.colors.medium}\n          />\n        </View>\n      </TouchableWithoutFeedback>\n\n      <Modal visible={ModalVisible} animationType=\"slide\">\n        <Screen>\n          <FlatList\n            data={items}\n            keyExtractor={(item) => item.value.toString()}\n            numColumns={numberOfColoms}\n            renderItem={({ item }) => (\n              <PickerItemsComponent\n                onPress={() => {\n                  SetModalVisible(false);\n                  onSelectedItem(item.label);\n                }}\n                item={item}\n                label={item.label}\n              />\n            )}\n          />\n          <AppButton title=\"close\" onPress={() => SetModalVisible(false)} />\n        </Screen>\n      </Modal>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: defaultStyles.colors.white,\n    borderRadius: 25,\n    flexDirection: \"row\",\n    padding: 15,\n    marginVertical: 10,\n    borderColor: colors.primary,\n    shadowColor: \"#000\",\n    shadowOffset: { width: 0.6, height: 0.4 },\n    shadowOpacity: 0.2,\n    shadowRadius: 2,\n    elevation: 9,\n    borderRadius: 10,\n    borderWidth: 1,\n  },\n  placeholder: {\n    color: defaultStyles.colors.grey,\n    flex: 1,\n  },\n  icon: {\n    marginRight: 10,\n  },\n  text: {\n    flex: 1,\n    color: colors.black,\n  },\n});\n\nexport default AppPicker;\n"]},"metadata":{},"sourceType":"module"}