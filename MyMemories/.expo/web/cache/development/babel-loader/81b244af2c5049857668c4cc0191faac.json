{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as yup from \"yup\";\nimport AppForm from \"../Components/AppForm\";\nimport AppFromField from \"../Components/AppFormField\";\nimport CustomText from \"../Components/CustomText\";\nimport Screen from \"../Components/Screen\";\nimport SubmitButton from \"../Components/SubmitButton\";\nimport ValidationErrorMessage from \"../Components/ValidationErrorMessage\";\nimport colors from \"../config/colors\";\nimport fontFamily from \"../config/fontFamily\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar validationSchema = yup.object().shape({\n  email: yup.string().required().email().label(\"*Email\"),\n  password: yup.string().required().min(8).label(\"*Password\")\n});\n\nfunction LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      visiblePassword = _useState2[0],\n      setVisiblePassword = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMessage = _useState4[0],\n      setErrorMessage = _useState4[1];\n\n  return _jsx(Screen, {\n    style: styles.container,\n    children: _jsxs(ScrollView, {\n      children: [_jsx(View, {\n        style: styles.welcomeTextContainer,\n        children: _jsx(Image, {\n          resizeMode: \"contain\",\n          style: styles.logo,\n          source: require(\"../assets/ecomLogo.png\")\n        })\n      }), _jsx(ValidationErrorMessage, {\n        error: errorMessage,\n        visible: errorMessage\n      }), _jsx(View, {\n        style: styles.inputFieldContainer,\n        children: _jsxs(AppForm, {\n          initialValues: {\n            email: \"\",\n            password: \"\"\n          },\n          validationSchema: validationSchema,\n          children: [_jsx(AppFromField, {\n            label: \"Email\",\n            width: \"95%\",\n            leftIcon: \"email\",\n            placeholder: \"Enter Email\",\n            autoCapitalize: \"none\",\n            autoCorrect: false,\n            name: \"email\",\n            keyboardType: \"email-address\",\n            TextContentType: \"emailAddress\"\n          }), _jsx(AppFromField, {\n            onRightIconPress: function onRightIconPress() {\n              return setVisiblePassword(!visiblePassword);\n            },\n            label: \"Password\",\n            width: \"95%\",\n            leftIcon: \"lock\",\n            rightIcon: \"eye\",\n            placeholder: \"Enter Password\",\n            autoCapitalize: \"none\",\n            name: \"password\",\n            autoCorrect: false,\n            secureTextEntry: visiblePassword,\n            TextContentType: \"password\"\n          }), _jsx(SubmitButton, {\n            loading: loginApi.loading,\n            marginTop: \"10%\",\n            title: \"Login\"\n          })]\n        })\n      }), _jsxs(View, {\n        children: [_jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            navigation.navigate(\"ForgotPassword\");\n          },\n          children: _jsx(Text, {\n            style: styles.forgetPasswordText,\n            children: \"Forgot password? Reset Here\"\n          })\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.navigate(\"Register\");\n          },\n          children: _jsx(CustomText, {\n            style: styles.goToRegister,\n            text: \" Or Register Here\"\n          })\n        })]\n      })]\n    })\n  });\n}\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  container: {\n    padding: 5,\n    backgroundColor: colors.white\n  },\n  logo: {\n    height: 120,\n    width: 200,\n    marginTop: 7,\n    alignSelf: \"center\",\n    padding: 10\n  },\n  inputFieldContainer: {\n    alignItems: \"center\"\n  },\n  welcomeTextContainer: {\n    marginTop: \"20%\",\n    marginBottom: \"6%\"\n  },\n  icon: {\n    top: 4,\n    marginRight: 10\n  },\n  welcomeText: {\n    fontSize: 22,\n    textAlign: \"center\",\n    color: colors.primary\n  },\n  forgetPasswordText: {\n    top: 15,\n    textAlign: \"center\",\n    color: colors.primary,\n    fontWeight: \"bold\",\n    fontSize: 18,\n    textDecorationLine: \"underline\"\n  },\n  otherSignInOptions: {\n    marginTop: 10,\n    fontSize: 19,\n    textAlign: \"center\"\n  },\n  goToRegister: {\n    marginTop: \"10%\",\n    color: colors.primary,\n    alignSelf: \"center\",\n    fontSize: 19,\n    fontFamily: fontFamily.Poppins_Medium\n  }\n});","map":{"version":3,"sources":["/Users/mac/Desktop/untitled folder/quick/quickApp/src/Screens/LoginScreen.js"],"names":["React","useState","yup","AppForm","AppFromField","CustomText","Screen","SubmitButton","ValidationErrorMessage","colors","fontFamily","validationSchema","object","shape","email","string","required","label","password","min","LoginScreen","navigation","visiblePassword","setVisiblePassword","errorMessage","setErrorMessage","styles","container","welcomeTextContainer","logo","require","inputFieldContainer","loginApi","loading","navigate","forgetPasswordText","goToRegister","StyleSheet","create","padding","backgroundColor","white","height","width","marginTop","alignSelf","alignItems","marginBottom","icon","top","marginRight","welcomeText","fontSize","textAlign","color","primary","fontWeight","textDecorationLine","otherSignInOptions","Poppins_Medium"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  ScrollView,\n  StyleSheet,\n  TouchableOpacity,\n  Text,\n  Image,\n  View,\n} from \"react-native\";\n\nimport * as yup from \"yup\";\n\nimport AppForm from \"../Components/AppForm\";\nimport AppFromField from \"../Components/AppFormField\";\nimport CustomText from \"../Components/CustomText\";\nimport Screen from \"../Components/Screen\";\n\nimport SubmitButton from \"../Components/SubmitButton\";\nimport ValidationErrorMessage from \"../Components/ValidationErrorMessage\";\n\nimport colors from \"../config/colors\";\nimport fontFamily from \"../config/fontFamily\";\n// import useApi from \"../hooks/useApi\";\n\nconst validationSchema = yup.object().shape({\n  email: yup.string().required().email().label(\"*Email\"),\n  password: yup.string().required().min(8).label(\"*Password\"),\n});\n\nfunction LoginScreen({ navigation }) {\n  // const loginApi = useApi(auth.login);\n\n  const [visiblePassword, setVisiblePassword] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  // const { logIn } = useAuth();\n  // const handleSubmit = async ({ email, password }) => {\n  //   setErrorMessage(\"\");\n  //   const result = await loginApi.request(false, email, password);\n\n  //   if (!result.ok) {\n  //     console.log(result.data);\n  //     setErrorMessage(result.data.message);\n  //     return;\n  //   }\n  //   console.log(result.data);\n  //   logIn(result.data);\n  // };\n\n  return (\n    <Screen style={styles.container}>\n      <ScrollView>\n        <View style={styles.welcomeTextContainer}>\n          <Image\n            resizeMode=\"contain\"\n            style={styles.logo}\n            source={require(\"../assets/ecomLogo.png\")}\n          />\n        </View>\n        <ValidationErrorMessage error={errorMessage} visible={errorMessage} />\n        <View style={styles.inputFieldContainer}>\n          <AppForm\n            initialValues={{ email: \"\", password: \"\" }}\n            validationSchema={validationSchema}\n            // onSubmit={handleSubmit}\n          >\n            <AppFromField\n              label=\"Email\"\n              width=\"95%\"\n              leftIcon=\"email\"\n              placeholder=\"Enter Email\"\n              autoCapitalize=\"none\"\n              autoCorrect={false}\n              name=\"email\"\n              keyboardType=\"email-address\"\n              TextContentType=\"emailAddress\"\n            />\n\n            <AppFromField\n              onRightIconPress={() => setVisiblePassword(!visiblePassword)}\n              label=\"Password\"\n              width=\"95%\"\n              leftIcon=\"lock\"\n              rightIcon=\"eye\"\n              placeholder=\"Enter Password\"\n              autoCapitalize=\"none\"\n              name=\"password\"\n              autoCorrect={false}\n              secureTextEntry={visiblePassword}\n              TextContentType=\"password\"\n            />\n\n            <SubmitButton\n              loading={loginApi.loading}\n              marginTop=\"10%\"\n              title=\"Login\"\n            />\n          </AppForm>\n        </View>\n        <View>\n          <TouchableOpacity\n            onPress={() => {\n              navigation.navigate(\"ForgotPassword\");\n            }}\n          >\n            <Text style={styles.forgetPasswordText}>\n              Forgot password? Reset Here\n            </Text>\n          </TouchableOpacity>\n          <TouchableOpacity onPress={() => navigation.navigate(\"Register\")}>\n            <CustomText style={styles.goToRegister} text=\" Or Register Here\" />\n          </TouchableOpacity>\n        </View>\n      </ScrollView>\n    </Screen>\n  );\n}\nexport default LoginScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 5,\n    backgroundColor: colors.white,\n  },\n  logo: {\n    height: 120,\n    width: 200,\n    // height: 80,\n    // width: 150,\n    marginTop: 7,\n\n    alignSelf: \"center\",\n    padding: 10,\n  },\n  inputFieldContainer: {\n    alignItems: \"center\",\n  },\n  welcomeTextContainer: {\n    marginTop: \"20%\",\n    marginBottom: \"6%\",\n  },\n  icon: {\n    top: 4,\n    marginRight: 10,\n  },\n\n  welcomeText: {\n    fontSize: 22,\n    textAlign: \"center\",\n    color: colors.primary,\n  },\n  forgetPasswordText: {\n    top: 15,\n    textAlign: \"center\",\n    color: colors.primary,\n    fontWeight: \"bold\",\n    fontSize: 18,\n    textDecorationLine: \"underline\",\n  },\n  otherSignInOptions: {\n    marginTop: 10,\n\n    fontSize: 19,\n    textAlign: \"center\",\n  },\n\n  goToRegister: {\n    marginTop: \"10%\",\n    color: colors.primary,\n    alignSelf: \"center\",\n\n    fontSize: 19,\n    fontFamily: fontFamily.Poppins_Medium,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}