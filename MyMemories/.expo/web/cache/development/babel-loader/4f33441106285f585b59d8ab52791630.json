{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from \"expo-status-bar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AuthNavigation from \"./src/Navigations/AuthNavigation\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport AppNavigation from \"./src/Navigations/AppNavigation\";\nimport Storage from \"./src/auth/Storage\";\nimport { useState } from \"react\";\nimport AppLoading from \"expo-app-loading\";\nimport AuthContext from \"./src/auth/context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isReady = _useState4[0],\n      setIsReady = _useState4[1];\n\n  var restorUser = function restorUser() {\n    var user;\n    return _regeneratorRuntime.async(function restorUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Storage.getUser());\n\n          case 2:\n            user = _context.sent;\n            if (user) setUser(user);else setUser(null);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!isReady) {\n    return _jsx(AppLoading, {\n      startAsync: restorUser,\n      onFinish: function onFinish() {\n        setIsReady(true);\n      },\n      onError: console.warn\n    });\n  }\n\n  return _jsx(AuthContext.Provider, {\n    value: {\n      user: user,\n      setUser: setUser\n    },\n    children: _jsx(NavigationContainer, {\n      children: _jsxs(View, {\n        style: styles.container,\n        children: [_jsx(StatusBar, {\n          style: \"auto\"\n        }), user ? _jsx(AppNavigation, {}) : _jsx(AuthNavigation, {})]\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["C:/Users/tonyj/Desktop/Mobile App/MyMemories/App.js"],"names":["StatusBar","AuthNavigation","NavigationContainer","AppNavigation","Storage","useState","AppLoading","AuthContext","App","user","setUser","isReady","setIsReady","restorUser","getUser","console","warn","styles","container","StyleSheet","create","flex"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,iBAA1B;;;;AAEA,OAAOC,cAAP;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,OAAOC,aAAP;AACA,OAAOC,OAAP;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,WAAP;;;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAAwBH,QAAQ,EAAhC;AAAA;AAAA,MAAOI,IAAP;AAAA,MAAaC,OAAb;;AAEA,mBAA8BL,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOM,OAAP;AAAA,MAAgBC,UAAhB;;AAIA,MAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACET,OAAO,CAACU,OAAR,EADF;;AAAA;AACXL,YAAAA,IADW;AAGjB,gBAAIA,IAAJ,EAAUC,OAAO,CAACD,IAAD,CAAP,CAAV,KACKC,OAAO,CAAC,IAAD,CAAP;;AAJY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAQA,MAAI,CAACC,OAAL,EAAc;AACZ,WACE,KAAC,UAAD;AACE,MAAA,UAAU,EAAEE,UADd;AAEE,MAAA,QAAQ,EAAE,oBAAM;AACdD,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD,OAJH;AAKE,MAAA,OAAO,EAAEG,OAAO,CAACC;AALnB,MADF;AASD;;AAGD,SACE,KAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEP,MAAAA,IAAI,EAAJA,IAAF;AAAQC,MAAAA,OAAO,EAAPA;AAAR,KAA7B;AAAA,cACE,KAAC,mBAAD;AAAA,gBACE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAEO,MAAM,CAACC,SAApB;AAAA,mBACE,KAAC,SAAD;AAAW,UAAA,KAAK,EAAC;AAAjB,UADF,EAGGT,IAAI,GAAG,KAAC,aAAD,KAAH,GAAuB,KAAC,cAAD,KAH9B;AAAA;AADF;AADF,IADF;AAWD;AAED,IAAMQ,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport AuthNavigation from \"./src/Navigations/AuthNavigation\";\nimport { NavigationContainer } from \"@react-navigation/native\";\n\nimport AppNavigation from \"./src/Navigations/AppNavigation\";\nimport Storage from \"./src/auth/Storage\";\nimport { useState } from \"react\";\nimport AppLoading from \"expo-app-loading\";\nimport AuthContext from \"./src/auth/context\";\n\nexport default function App() {\n  const [user, setUser] = useState();\n  //State check, checks if app is ready to open\n  const [isReady, setIsReady] = useState(false);\n\n  // This method, restores user data from local storage, if user was logged in. \n  // Conditionally renders login pages or homepage.\n  const restorUser = async () => {\n    const user = await Storage.getUser();\n\n    if (user) setUser(user);\n    else setUser(null);\n  };\n\n  // Restores user data, behind splash screen. \n  if (!isReady) {\n    return (\n      <AppLoading\n        startAsync={restorUser}\n        onFinish={() => {\n          setIsReady(true);\n        }}\n        onError={console.warn}\n      />\n    );\n  }\n\n  // User context used to provide, user info throughou app.\n  return (\n    <AuthContext.Provider value={{ user, setUser }}>\n      <NavigationContainer>\n        <View style={styles.container}>\n          <StatusBar style=\"auto\" />\n          {/* Checks if login page should be shown or userdata should be imported from local storage */}\n          {user ? <AppNavigation /> : <AuthNavigation />}\n        </View>\n      </NavigationContainer>\n    </AuthContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}