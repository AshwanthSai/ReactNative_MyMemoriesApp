{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport * as imagePicker from \"expo-image-picker\";\nimport { useFormikContext } from \"formik\";\nimport ValidationErrorMessage from \"./ValidationErrorMessage\";\nimport colors from \"../config/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ImageInput(_ref) {\n  var name = _ref.name,\n      uri = _ref.uri,\n      setUri = _ref.setUri;\n\n  var _useFormikContext = useFormikContext(),\n      setFieldValue = _useFormikContext.setFieldValue,\n      errors = _useFormikContext.errors,\n      values = _useFormikContext.values,\n      touched = _useFormikContext.touched;\n\n  var handlePress = function handlePress() {\n    if (!uri) selectImage();else {\n      Alert.alert(\"Delete Image\", \"Do you want unselect the image?\", [{\n        text: \"yes\",\n        onPress: function onPress() {\n          setUri(null);\n          setFieldValue(name, null);\n        }\n      }, {\n        text: \"No\"\n      }]);\n    }\n  };\n\n  var selectImage = function selectImage() {\n    var result;\n    return _regeneratorRuntime.async(function selectImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(imagePicker.launchImageLibraryAsync({\n              mediaTypes: imagePicker.MediaTypeOptions.Images,\n              quality: 0.5,\n              allowsEditing: true\n            }));\n\n          case 3:\n            result = _context.sent;\n\n            if (!result.cancelled) {\n              setUri(result.uri);\n              setFieldValue(name, {\n                uri: result.uri,\n                type: result.type\n              });\n            }\n\n            console.log(result);\n            result;\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(\"unable to select image\", _context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(TouchableWithoutFeedback, {\n      onPress: handlePress,\n      children: _jsxs(View, {\n        style: styles.container,\n        children: [!uri && _jsx(MaterialCommunityIcons, {\n          name: \"camera\",\n          size: 50,\n          color: colors.medium\n        }), uri && _jsx(Image, {\n          style: styles.image,\n          source: {\n            uri: uri\n          }\n        })]\n      })\n    }), _jsx(ValidationErrorMessage, {\n      error: errors[name],\n      visible: touched[name]\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    backgroundColor: colors.white,\n    height: 100,\n    width: 100,\n    borderRadius: 15,\n    justifyContent: \"center\",\n    overflow: \"hidden\",\n    borderWidth: 1,\n    borderColor: colors.primary\n  },\n  image: {\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\nexport default ImageInput;","map":{"version":3,"sources":["C:/Users/tonyj/Desktop/Mobile App/MyMemories/src/Components/ImageInput.js"],"names":["React","useEffect","useState","MaterialCommunityIcons","imagePicker","useFormikContext","ValidationErrorMessage","colors","ImageInput","name","uri","setUri","setFieldValue","errors","values","touched","handlePress","selectImage","Alert","alert","text","onPress","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","quality","allowsEditing","result","cancelled","type","console","log","styles","container","medium","image","StyleSheet","create","alignItems","backgroundColor","white","height","width","borderRadius","justifyContent","overflow","borderWidth","borderColor","primary"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  View,\n  StyleSheet,\n  Image,\n  TouchableWithoutFeedback,\n  Alert,\n} from \"react-native\";\n\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport * as imagePicker from \"expo-image-picker\";\n\nimport { useFormikContext } from \"formik\";\nimport ValidationErrorMessage from \"./ValidationErrorMessage\";\nimport colors from \"../config/colors\";\n\nfunction ImageInput({ name, uri, setUri }) {\n\n  const { setFieldValue, errors, values, touched } = useFormikContext();\n\n  const handlePress = () => {\n    if (!uri) selectImage();\n    else {\n      Alert.alert(\"Delete Image\", \"Do you want unselect the image?\", [\n        {\n          text: \"yes\",\n          onPress: () => {\n            // onChangeImage(null);\n            setUri(null);\n            setFieldValue(name, null);\n          },\n        },\n        {\n          text: \"No\",\n        },\n      ]);\n    }\n  };\n\n  const selectImage = async () => {\n    try {\n      const result = await imagePicker.launchImageLibraryAsync({\n        mediaTypes: imagePicker.MediaTypeOptions.Images,\n        quality: 0.5,\n        allowsEditing: true,\n        // base64: true,\n        // allowsEditing: true,\n      });\n      if (!result.cancelled) {\n        // onChangeImage(result.uri);\n        setUri(result.uri);\n        setFieldValue(name, {\n          uri: result.uri,\n          type: result.type,\n        });\n      }\n      console.log(result);\n      result;\n    } catch (error) {\n      console.log(\"unable to select image\", error);\n    }\n  };\n\n  return (\n    <>\n      <TouchableWithoutFeedback onPress={handlePress}>\n        <View style={styles.container}>\n          {!uri && (\n            <MaterialCommunityIcons\n              name=\"camera\"\n              size={50}\n              color={colors.medium}\n            />\n          )}\n\n          {uri && <Image style={styles.image} source={{ uri }} />}\n        </View>\n      </TouchableWithoutFeedback>\n      <ValidationErrorMessage error={errors[name]} visible={touched[name]} />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    backgroundColor: colors.white,\n    height: 100,\n    width: 100,\n    borderRadius: 15,\n    justifyContent: \"center\",\n    overflow: \"hidden\",\n    borderWidth: 1,\n    borderColor: colors.primary,\n  },\n  image: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n});\n\nexport default ImageInput;\n"]},"metadata":{},"sourceType":"module"}