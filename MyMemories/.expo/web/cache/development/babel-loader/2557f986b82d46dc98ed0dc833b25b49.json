{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as yup from \"yup\";\nimport AppForm from \"../Components/AppForm\";\nimport AppFromField from \"../Components/AppFormField\";\nimport CustomText from \"../Components/CustomText\";\nimport Screen from \"../Components/Screen\";\nimport SubmitButton from \"../Components/SubmitButton\";\nimport colors from \"../config/colors\";\nimport fontFamily from \"../config/fontFamily\";\nimport useAuth from \"../auth/useAuth\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar validationSchema = yup.object().shape({\n  email: yup.string().required().email().label(\"*Email\"),\n  password: yup.string().required().min(8).label(\"*Password\")\n});\nvar RegisterUser = [{\n  id: 1,\n  userName: \"Sample User1\",\n  email: \"sampleuser1@gmail.com\",\n  password: 123456789\n}, {\n  id: 2,\n  userName: \"Sample User2\",\n  email: \"sampleuser2@gmail.com\",\n  password: 123456789\n}, {\n  id: 3,\n  userName: \"Sample User3\",\n  email: \"sampleuser3@gmail.com\",\n  password: 123456789\n}];\n\nfunction LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useAuth = useAuth(),\n      logIn = _useAuth.logIn;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      visiblePassword = _useState2[0],\n      setVisiblePassword = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var handlelogin = function handlelogin(_ref2) {\n    var email = _ref2.email,\n        password = _ref2.password;\n    setLoading(true);\n    console.log(email, password);\n    var verifyUser = RegisterUser.filter(function (user) {\n      return user.email.match(email) && user.password.toString() === password;\n    });\n\n    if (verifyUser.length > 0) {\n      console.log(verifyUser[0]);\n      setLoading(false);\n      logIn(verifyUser[0]);\n    } else {\n      setLoading(false);\n      alert(\"Invalid email or password\");\n    }\n  };\n\n  return _jsx(Screen, {\n    style: styles.container,\n    children: _jsxs(ScrollView, {\n      children: [_jsx(View, {\n        style: styles.welcomeTextContainer,\n        children: _jsx(Image, {\n          resizeMode: \"contain\",\n          style: styles.logo,\n          source: require(\"../assets/logo.png\")\n        })\n      }), _jsx(View, {\n        style: styles.inputFieldContainer,\n        children: _jsxs(AppForm, {\n          initialValues: {\n            email: \"\",\n            password: \"\"\n          },\n          validationSchema: validationSchema,\n          onSubmit: handlelogin,\n          children: [_jsx(AppFromField, {\n            label: \"Email\",\n            width: \"95%\",\n            leftIcon: \"email\",\n            placeholder: \"Enter Email\",\n            autoCapitalize: \"none\",\n            autoCorrect: false,\n            name: \"email\",\n            keyboardType: \"email-address\",\n            TextContentType: \"emailAddress\"\n          }), _jsx(AppFromField, {\n            onRightIconPress: function onRightIconPress() {\n              return setVisiblePassword(!visiblePassword);\n            },\n            label: \"Password\",\n            width: \"95%\",\n            leftIcon: \"lock\",\n            rightIcon: \"eye\",\n            placeholder: \"Enter Password\",\n            autoCapitalize: \"none\",\n            name: \"password\",\n            autoCorrect: false,\n            secureTextEntry: visiblePassword,\n            TextContentType: \"password\"\n          }), _jsx(SubmitButton, {\n            loading: loading,\n            marginTop: \"10%\",\n            title: \"Login\"\n          })]\n        })\n      }), _jsx(View, {\n        children: _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.navigate(\"Register\");\n          },\n          children: _jsx(CustomText, {\n            style: styles.goToRegister,\n            text: \" Or Register Here\"\n          })\n        })\n      })]\n    })\n  });\n}\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  container: {\n    padding: 5,\n    backgroundColor: colors.white\n  },\n  logo: {\n    height: 120,\n    width: 200,\n    marginTop: 7,\n    alignSelf: \"center\",\n    padding: 10\n  },\n  inputFieldContainer: {\n    alignItems: \"center\"\n  },\n  welcomeTextContainer: {\n    marginTop: \"20%\",\n    marginBottom: \"6%\"\n  },\n  icon: {\n    top: 4,\n    marginRight: 10\n  },\n  welcomeText: {\n    fontSize: 22,\n    textAlign: \"center\",\n    color: colors.primary\n  },\n  forgetPasswordText: {\n    top: 15,\n    textAlign: \"center\",\n    color: colors.primary,\n    fontWeight: \"bold\",\n    fontSize: 18,\n    textDecorationLine: \"underline\"\n  },\n  otherSignInOptions: {\n    marginTop: 10,\n    fontSize: 19,\n    textAlign: \"center\"\n  },\n  goToRegister: {\n    marginTop: \"10%\",\n    color: colors.primary,\n    alignSelf: \"center\",\n    fontSize: 19,\n    fontFamily: fontFamily.Poppins_Medium\n  }\n});","map":{"version":3,"sources":["C:/Users/tonyj/Desktop/Mobile App/MyMemories/src/Screens/LoginScreen.js"],"names":["React","useState","yup","AppForm","AppFromField","CustomText","Screen","SubmitButton","colors","fontFamily","useAuth","validationSchema","object","shape","email","string","required","label","password","min","RegisterUser","id","userName","LoginScreen","navigation","logIn","visiblePassword","setVisiblePassword","loading","setLoading","handlelogin","console","log","verifyUser","filter","user","match","toString","length","alert","styles","container","welcomeTextContainer","logo","require","inputFieldContainer","navigate","goToRegister","StyleSheet","create","padding","backgroundColor","white","height","width","marginTop","alignSelf","alignItems","marginBottom","icon","top","marginRight","welcomeText","fontSize","textAlign","color","primary","forgetPasswordText","fontWeight","textDecorationLine","otherSignInOptions","Poppins_Medium"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  ScrollView,\n  StyleSheet,\n  TouchableOpacity,\n  Text,\n  Image,\n  View,\n} from \"react-native\";\n\nimport * as yup from \"yup\";\nimport AppForm from \"../Components/AppForm\";\nimport AppFromField from \"../Components/AppFormField\";\nimport CustomText from \"../Components/CustomText\";\nimport Screen from \"../Components/Screen\";\n\nimport SubmitButton from \"../Components/SubmitButton\";\n\nimport colors from \"../config/colors\";\nimport fontFamily from \"../config/fontFamily\";\n\nimport useAuth from \"../auth/useAuth\";\n\n//Validation schema for feilds\nconst validationSchema = yup.object().shape({\n  email: yup.string().required().email().label(\"*Email\"),\n  password: yup.string().required().min(8).label(\"*Password\"),\n});\n\n// Array of Limited, registered users.\nconst RegisterUser = [\n  {\n    id: 1,\n    userName: \"Sample User1\",\n    email: \"sampleuser1@gmail.com\",\n    password: 123456789,\n  },\n  {\n    id: 2,\n    userName: \"Sample User2\",\n    email: \"sampleuser2@gmail.com\",\n    password: 123456789,\n  },\n  {\n    id: 3,\n    userName: \"Sample User3\",\n    email: \"sampleuser3@gmail.com\",\n    password: 123456789,\n  },\n];\n\n// Saves user in local storage\nfunction LoginScreen({ navigation }) {\n  const { logIn } = useAuth();\n\n  const [visiblePassword, setVisiblePassword] = useState(true);\n  const [loading, setLoading] = useState(false);\n\n  // Function for login\n  const handlelogin = ({ email, password }) => {\n    setLoading(true);\n    console.log(email, password);\n    // Filters the user from above array, Email and password is checked with input.\n\n    const verifyUser = RegisterUser.filter(\n      (user) => user.email.match(email) && user.password.toString() === password\n    );\n    //Saves user in local storage using custom hook useAuth which has method login.\n    if (verifyUser.length > 0) {\n      console.log(verifyUser[0]);\n      setLoading(false);\n      logIn(verifyUser[0]);\n    } else {\n      //If credentials dont match, pop error.\n      setLoading(false);\n      alert(\"Invalid email or password\");\n    }\n  };\n\n  return (\n    <Screen style={styles.container}>\n      <ScrollView>\n        <View style={styles.welcomeTextContainer}>\n          <Image\n            resizeMode=\"contain\"\n            style={styles.logo}\n            source={require(\"../assets/logo.png\")}\n          />\n        </View>\n        <View style={styles.inputFieldContainer}>\n          {/* This is custom component of formik, wraps the inputs \n           like we <Formik > ...</Formik> */}\n          <AppForm\n            initialValues={{ email: \"\", password: \"\" }}\n            validationSchema={validationSchema}\n            onSubmit={handlelogin}\n          >\n            {/* This is custom component which wrappes on custom input and \n          in this componenet, formik hook is used to handle its function to get the \n          the value of input like setValues etc */}\n            <AppFromField\n              label=\"Email\"\n              width=\"95%\"\n              leftIcon=\"email\"\n              placeholder=\"Enter Email\"\n              autoCapitalize=\"none\"\n              autoCorrect={false}\n              name=\"email\"\n              keyboardType=\"email-address\"\n              TextContentType=\"emailAddress\"\n            />\n\n            <AppFromField\n              onRightIconPress={() => setVisiblePassword(!visiblePassword)}\n              label=\"Password\"\n              width=\"95%\"\n              leftIcon=\"lock\"\n              rightIcon=\"eye\"\n              placeholder=\"Enter Password\"\n              autoCapitalize=\"none\"\n              name=\"password\"\n              autoCorrect={false}\n              secureTextEntry={visiblePassword}\n              TextContentType=\"password\"\n            />\n\n            {/* This is the component for submit its is a wrapper on button it will submit \n            data to formik */}\n            <SubmitButton loading={loading} marginTop=\"10%\" title=\"Login\" />\n          </AppForm>\n        </View>\n        <View>\n          <TouchableOpacity onPress={() => navigation.navigate(\"Register\")}>\n            <CustomText style={styles.goToRegister} text=\" Or Register Here\" />\n          </TouchableOpacity>\n        </View>\n      </ScrollView>\n    </Screen>\n  );\n}\nexport default LoginScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 5,\n    backgroundColor: colors.white,\n  },\n  logo: {\n    height: 120,\n    width: 200,\n    marginTop: 7,\n\n    alignSelf: \"center\",\n    padding: 10,\n  },\n  inputFieldContainer: {\n    alignItems: \"center\",\n  },\n  welcomeTextContainer: {\n    marginTop: \"20%\",\n    marginBottom: \"6%\",\n  },\n  icon: {\n    top: 4,\n    marginRight: 10,\n  },\n\n  welcomeText: {\n    fontSize: 22,\n    textAlign: \"center\",\n    color: colors.primary,\n  },\n  forgetPasswordText: {\n    top: 15,\n    textAlign: \"center\",\n    color: colors.primary,\n    fontWeight: \"bold\",\n    fontSize: 18,\n    textDecorationLine: \"underline\",\n  },\n  otherSignInOptions: {\n    marginTop: 10,\n\n    fontSize: 19,\n    textAlign: \"center\",\n  },\n\n  goToRegister: {\n    marginTop: \"10%\",\n    color: colors.primary,\n    alignSelf: \"center\",\n\n    fontSize: 19,\n    fontFamily: fontFamily.Poppins_Medium,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}